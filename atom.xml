<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://byte-coder2020.github.io/atom.xml" rel="self"/>
  
  <link href="https://byte-coder2020.github.io/"/>
  <updated>2024-03-10T14:44:56.118Z</updated>
  <id>https://byte-coder2020.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vlm_config</title>
    <link href="https://byte-coder2020.github.io/2024/03/10/vlm-config/"/>
    <id>https://byte-coder2020.github.io/2024/03/10/vlm-config/</id>
    <published>2024-03-10T14:44:37.000Z</published>
    <updated>2024-03-10T14:44:56.118Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Untitled"><a href="#Untitled" class="headerlink" title="Untitled"></a>Untitled</h1><h1 id="拉镜像，启动容器"><a href="#拉镜像，启动容器" class="headerlink" title="拉镜像，启动容器"></a>拉镜像，启动容器</h1><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run --name llava_wyh -dt -p 3133:30314 -p 3134:30315 -p 3135:20000 -p 3136:50000 -p 3137:50001 -p :7860 -p 30769:22 -v /mnt/inaisfs/user-fs/wangyinhe:/home llava3.0</span><br><span class="line"><span class="comment"># docker run :创建并启动一个docker容器</span></span><br><span class="line"><span class="comment"># --name &lt;docker_name&gt; :指定容器名称</span></span><br><span class="line"><span class="comment"># -dt :以守护进程模式运行容器，并在后台运行 -d 在后台运行容器并打印容器ID</span></span><br><span class="line"><span class="comment"># -p :将容器的端口映射到主机的端口 -p :7860 将容器的所有端口映射到主机的端口 7860 -p 30769:22 将容器的端口 22 映射到主机的端口 30769</span></span><br><span class="line"><span class="comment"># -v /mnt/inaisfs/user-fs/wangyinhe:/home :卷挂载，将主机的/mnt/inaisfs/user-fs/wangyinhe挂载到容器的/home目录下</span></span><br><span class="line"><span class="comment"># llava3.0 镜像名</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it b1142dd9c102 /opt/nvidia/nvidia_entrypoint.sh /bin/bash</span><br><span class="line"><span class="comment"># docker exec :在运行的docker容器中执行其他命令</span></span><br><span class="line"><span class="comment"># -it :-i 表示交互式模式，允许与容器进行交互；-t 表示分配一个 tty（终端），以便能够在容器内看到输入和输出。</span></span><br><span class="line"><span class="comment"># b1142dd9c102 :要执行命令的特定 Docker 容器的标识符，使用docker ps 命令查看当前运行的容器列表来找到相应的容器 ID</span></span><br><span class="line"><span class="comment"># /opt/nvidia/nvidia_entrypoint.sh：这是要执行的脚本文件的路径</span></span><br><span class="line"><span class="comment"># /bin/bash：这是在执行完脚本后要启动的交互式 Bash shell</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a --no-trunc</span><br><span class="line"><span class="comment"># docker ps : 列出当前运行的 Docker 容器</span></span><br><span class="line"><span class="comment"># -a :显示所有的容器，包括已停止的容器</span></span><br><span class="line"><span class="comment"># --no-trunc :用于防止截断容器的名称，使其完整显示</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 OpenSSH 服务器</span></span><br><span class="line">apt-get install openssh-server</span><br><span class="line"><span class="comment"># 安装vim编辑器</span></span><br><span class="line">apt-get install vim</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> /run/sshd</span><br><span class="line"></span><br><span class="line">/usr/sbin/sshd</span><br><span class="line"></span><br><span class="line">ps -e | grep ssh</span><br><span class="line"></span><br><span class="line">/etc/init.d/ssh restart</span><br><span class="line"></span><br><span class="line">vim /sshd.sh</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m llava.serve.controller --host <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> --port <span class="number">20000</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m llava.serve.gradio_web_server --controller http://localhost:<span class="number">20000</span> --model-<span class="built_in">list</span>-mode reload</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Launch a model worker (LoRA weights, unmerged)</span><br><span class="line">python -m llava.serve.model_worker --host <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> --controller http://localhost:<span class="number">20000</span> --port <span class="number">50000</span> --worker http://localhost:<span class="number">50000</span> --model-path /home/LLaVA/checkpoints/llava-v1<span class="number">.5</span>-7b-task-lora/ --model-base /home/weighted/llava-v1<span class="number">.5</span>-7b/</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python -m llava.serve.model_worker --host <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> --controller http://localhost:<span class="number">20000</span> --port <span class="number">50001</span> --worker http://localhost:<span class="number">50001</span> --model-path /home/weighted/llava-v1<span class="number">.5</span>-13b</span><br><span class="line"><span class="number">219.242</span><span class="number">.115</span><span class="number">.12</span>:<span class="number">3138</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong><a href="https://www.jianshu.com/p/889885e75de8">docker 挂载宿主机文件目录</a><br><a href="https://developer.aliyun.com/article/14800?userCode=okjhlpr5">dockerfile 多端口映射</a><br><a href="https://pythondjango.cn/python/tools/2-docker-dockerfile/">Docker命令大全及Dockerfile详解</a><br><a href="https://blog.csdn.net/weixin_43220532/article/details/116741109">docker 获取Nvidia 镜像 | cuda |cudnn</a><br><a href="https://www.jerrymei.cn/docker-container-run-not-stop-automatically/">docker run 如何让容器启动后不会自动停止</a><br><a href="https://zihengcat.github.io/2019/06/12/understanding-and-practicing-docker-entrypoint-cmd/">Docker ENTRYPOINT &amp; CMD 理解与实践</a></strong></p></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">docker pull nvidia/cuda:12.0.0-devel-ubuntu20.04</span><br><span class="line"><span class="comment"># 查看镜像情况</span></span><br><span class="line">docker images</span><br><span class="line"><span class="comment"># </span></span><br></pre></td></tr></tbody></table></figure><h1 id="开启SSH服务"><a href="#开启SSH服务" class="headerlink" title="开启SSH服务"></a>开启SSH服务</h1><p><strong><a href="https://blog.csdn.net/Magic_Ninja/article/details/88068764">SSH启动报错：Missing privilege separation directory: /run/sshd</a></strong></p><p><strong><a href="https://blog.csdn.net/weixin_43220532/article/details/116741109">解决‘System has not been booted with systemd as init system (PID 1). Can‘t operate.‘</a></strong></p><p><strong><a href="https://blog.csdn.net/Starrysky_LTL/article/details/121168670">docker进入当前正在运行容器的两种方式（exec和attach的区别）</a></strong></p><p><strong><a href="https://blog.csdn.net/tangsiqi130/article/details/130017060">Docker中进入容器exec和attach的区别</a></strong></p><p><strong><a href="https://www.cnblogs.com/devilmaycry812839668/p/13691236.html">在docker 容器开启ssh ， 并映射22端口到物理载体机上以使外网访问</a></strong></p><p><strong><a href="https://blog.csdn.net/frighting_ing/article/details/129255248">ssh远程连接出现 Permission denied, please try again问题</a>（修改sshd_config配置文件）</strong></p><p><strong><a href="https://blog.csdn.net/wd18508423052/article/details/116306096">docker修改shm-size</a></strong></p><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><h2 id="运行容器-开启ssh服务"><a href="#运行容器-开启ssh服务" class="headerlink" title="运行容器 开启ssh服务"></a>运行容器 开启ssh服务</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行镜像并启动容器，开启端口映射，并在后台运行，同时打印容器ID，挂载主机目录到容器 /home 目录下，修改shm-size大小为8G</span></span><br><span class="line">docker run --name Interlm -idt --shm-size 8G -p 4133:30614 -p 4134:30615 -p 4135:30000 -p 4136:60000 -p 4137:60001 -p :7860 -p 30563:22 -v /mnt/inaisfs/user-fs/wangyinhe:/home nvidia/cuda:12.0.0-devel-ubuntu20.04</span><br><span class="line"></span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在运行的docker容器中执行其他命令</span></span><br><span class="line">docker <span class="built_in">exec</span> -it a21f70d0d946 /opt/nvidia/nvidia_entrypoint.sh /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器后，更新源</span></span><br><span class="line">apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装ssh-server</span></span><br><span class="line">apt-get install openssh-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动sshd</span></span><br><span class="line">/usr/sbin/sshd -D &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改密码</span></span><br><span class="line">passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># ssh登入容器</span></span><br><span class="line">ssh -p 30563 root@219.242.115.12</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编写sshd启动脚本</span></span><br><span class="line">vim /sshd.sh</span><br><span class="line"><span class="comment"># /sshd.sh 内容:</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">/usr/sbin/sshd -D &amp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> 755 /sshd.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改sshd_config配置文件</span></span><br><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启ssh服务，使得配置生效[docker内部操作]</span></span><br><span class="line">/etc/init.d/ssh restart</span><br></pre></td></tr></tbody></table></figure><h2 id="删除正在运行的docker-容器"><a href="#删除正在运行的docker-容器" class="headerlink" title="删除正在运行的docker 容器"></a>删除正在运行的docker 容器</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 停止容器的运行</span></span><br><span class="line">docker stop &lt;ID或名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器停止后，删除容器</span></span><br><span class="line">docker <span class="built_in">rm</span> &lt;ID或名称&gt;</span><br></pre></td></tr></tbody></table></figure><p><strong><a href="https://www.henghost.com/jishu/25996/?rdmc=7c1095ac13&amp;rdme=1709113266">docker怎么删除正在运行的容器</a></strong></p><h2 id="安装Anaconda3"><a href="#安装Anaconda3" class="headerlink" title="安装Anaconda3"></a>安装Anaconda3</h2><blockquote><p><strong><a href="https://www.cnblogs.com/hxx1128/p/15292212.html">conda: command not found解决办法</a></strong></p></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看Ubuntu版本号</span></span><br><span class="line">lsb_release -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载Anaconda</span></span><br><span class="line"><span class="comment"># 执行安装指令</span></span><br><span class="line">bash Anaconda3-2023.09-0-Linux-x86_64.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向.bashrc添加路径</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export PATH="/root/anaconda3/bin:$PATH"'</span> &gt;&gt; ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新源</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看conda 版本</span></span><br><span class="line">conda -V</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="修改-condarc配置"><a href="#修改-condarc配置" class="headerlink" title="修改.condarc配置"></a>修改.condarc配置</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">channels:</span><br><span class="line">  - defaults</span><br><span class="line">show_channel_urls: <span class="literal">true</span></span><br><span class="line">default_channels:</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</span><br><span class="line">custom_channels:</span><br><span class="line">  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  pytorch-lts: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  deepmodeling: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/</span><br></pre></td></tr></tbody></table></figure><h3 id="pip换源"><a href="#pip换源" class="headerlink" title="pip换源"></a>pip换源</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 临时使用镜像源安装</span></span><br><span class="line">pip install -i https://mirrors.cernet.edu.cn/pypi/web/simple &lt;some-package&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置pip默认镜像源，升级 pip 到最新的版本</span></span><br><span class="line">python -m pip install --upgrade pip</span><br><span class="line">pip config <span class="built_in">set</span> global.index-url https://mirrors.cernet.edu.cn/pypi/web/simple</span><br></pre></td></tr></tbody></table></figure><h2 id="部署InternLM"><a href="#部署InternLM" class="headerlink" title="部署InternLM"></a>部署InternLM</h2><h3 id="安装LMDeploy"><a href="#安装LMDeploy" class="headerlink" title="安装LMDeploy"></a>安装LMDeploy</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install lmdeploy</span><br></pre></td></tr></tbody></table></figure><h2 id="部署MoE-LLaVA"><a href="#部署MoE-LLaVA" class="headerlink" title="部署MoE-LLaVA"></a>部署MoE-LLaVA</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/PKU-YuanGroup/MoE-LLaVA</span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">git <span class="built_in">clone</span> https://hub.fastgit.org/PKU-YuanGroup/MoE-LLaVA</span><br><span class="line"><span class="built_in">cd</span> MoE-LLaVA</span><br><span class="line">conda create -n moellava python=3.10 -y</span><br><span class="line">conda activate moellava</span><br><span class="line"><span class="comment"># 开启 PEP 660 支持</span></span><br><span class="line">pip install --upgrade pip</span><br><span class="line">pip install -e .</span><br><span class="line">pip install -e <span class="string">".[train]"</span></span><br><span class="line">pip install flash-attn --no-build-isolation</span><br></pre></td></tr></tbody></table></figure><h3 id="下载模型文件"><a href="#下载模型文件" class="headerlink" title="下载模型文件"></a>下载模型文件</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 准备工作</span></span><br><span class="line">apt-get install git</span><br><span class="line">apt-get install aria2</span><br><span class="line">apt-get install git-lfs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用hfd.sh下载模型</span></span><br><span class="line">/home/weighted/hfd.sh LanguageBind/MoE-LLaVA-StableLM-1.6B-4e-384 --tool aria2c -x 16</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用modelscope下载模型</span></span><br><span class="line">from modelscope import snapshot_download</span><br><span class="line">model_dir = snapshot_download(<span class="string">'PKU-YuanLab/MoE-LLaVA-Phi2-2.7B-4e-384'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deepspeed --include 219.242.115.12:30000 moellava/serve/gradio_web_server.py --model-path <span class="string">"/home/weighted/PKU-YuanLab/MoE-LLaVA-Phi2-2___7B-4e-384"</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="LLM模型下载"><a href="#LLM模型下载" class="headerlink" title="LLM模型下载"></a>LLM模型下载</h2><p>Huggingface镜像站：</p><p><a href="https://hf-mirror.com/">https://hf-mirror.com/</a></p><h2 id="安装CLIP"><a href="#安装CLIP" class="headerlink" title="安装CLIP"></a>安装CLIP</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conda install --<span class="built_in">yes</span> pytorch torchvision cudatoolkit</span><br><span class="line">pip install ftfy regex tqdm</span><br><span class="line">pip install git+https://github.com/openai/CLIP.git</span><br><span class="line">~~pip install git+https://hub.fastgit.org/openai/CLIP.git~~</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>vlm_wyh</th><th>542307ac0c57</th><th></th></tr></thead><tbody><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="安装GroundingDINO"><a href="#安装GroundingDINO" class="headerlink" title="安装GroundingDINO"></a>安装GroundingDINO</h2><h3 id="配置Cuda路径"><a href="#配置Cuda路径" class="headerlink" title="配置Cuda路径"></a>配置Cuda路径</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看cuda路径</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="运行-Demo"><a href="#运行-Demo" class="headerlink" title="运行 Demo"></a>运行 Demo</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Template</span></span><br><span class="line">CUDA_VISIBLE_DEVICES={GPU ID} python demo/inference_on_a_image.py \</span><br><span class="line">-c groundingdino/config/GroundingDINO_SwinT_OGC.py \</span><br><span class="line">-p weights/groundingdino_swint_ogc.pth \</span><br><span class="line">-i image_you_want_to_detect.jpg \</span><br><span class="line">-o <span class="string">"dir you want to save the output"</span> \</span><br><span class="line">-t <span class="string">"chair"</span></span><br><span class="line"> [--cpu-only] <span class="comment"># open it for cpu mode</span></span><br><span class="line"></span><br><span class="line">CUDA_VISIBLE_DEVICES={0} python demo/inference_on_a_image.py \</span><br><span class="line">-c groundingdino/config/GroundingDINO_SwinT_OGC.py \</span><br><span class="line">-p weights/groundingdino_swint_ogc.pth \</span><br><span class="line">-i <span class="string">"/home/GroundingDINO/to_detect/000005.jpg"</span> \</span><br><span class="line">-o <span class="string">"/home/GroundingDINO/output/"</span> \</span><br><span class="line">-t <span class="string">"chair"</span></span><br><span class="line"> [--cpu-only] <span class="comment"># open it for cpu mode</span></span><br></pre></td></tr></tbody></table></figure><p><strong><a href="https://www.cnblogs.com/mrneojeep/p/16252044.html">libGL.so.1: cannot open shared object file: No such file or directory</a></strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install iputils-ping</span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/Kuingsmile/clash-core/releases/download/1.18/clash-linux-amd64-v1.18.0.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压缩</span></span><br><span class="line">gunzip clash-linux-amd64-v1.18.0.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 赋予操作权限</span></span><br><span class="line"><span class="built_in">chmod</span> +x clash-linux-amd64-v1.18.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行clash</span></span><br><span class="line">./clash-linux-amd64-v1.18.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动文件</span></span><br><span class="line"><span class="built_in">mkdir</span> /opt/clash</span><br><span class="line"><span class="built_in">mv</span> clash-linux-amd64-v1.18.0 /opt/clash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名</span></span><br><span class="line"><span class="built_in">mv</span> clash-linux-amd64-v1.18.0 clash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 订阅节点</span></span><br><span class="line">trojan://180c7f40-c29e-445d-8056-ae92f3b451d7@95.164.114.43:443?<span class="built_in">type</span>=tcp&amp;sni=kz-full.privateip.net&amp;allowInsecure=1<span class="comment">#%F0%9F%87%BA%F0%9F%87%B8_US_%E7%BE%8E%E5%9B%BD</span></span><br><span class="line">https://mojie.app/api/v1/client/subscribe?token=42148492cbfcfdc8906f9355e0d71b81</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定配置节点运行clash</span></span><br><span class="line">./clash -f v2rayse_2024-02-29\ 10_12_45.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置clash 服务</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start clash</span><br><span class="line">systemctl status clash</span><br><span class="line"></span><br><span class="line">curl -i google.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在终端开启代理 (每次都要开启代理，终端关闭后就失效了)</span></span><br><span class="line"><span class="built_in">export</span> http_proxy=http://127.0.0.1:7890</span><br><span class="line"><span class="built_in">export</span> https_proxy=http://127.0.0.1:7890</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img src="/Untitled%20af31344f082f4c8e83cabe23e8c6741f/Untitled.png" alt="Untitled"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Untitled&quot;&gt;&lt;a href=&quot;#Untitled&quot; class=&quot;headerlink&quot; title=&quot;Untitled&quot;&gt;&lt;/a&gt;Untitled&lt;/h1&gt;&lt;h1 id=&quot;拉镜像，启动容器&quot;&gt;&lt;a href=&quot;#拉镜像，启动容器&quot; class=&quot;head</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>My second blog</title>
    <link href="https://byte-coder2020.github.io/2024/03/10/My-second-blog/"/>
    <id>https://byte-coder2020.github.io/2024/03/10/My-second-blog/</id>
    <published>2024-03-10T13:42:48.000Z</published>
    <updated>2024-03-10T13:42:48.959Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>My first blog</title>
    <link href="https://byte-coder2020.github.io/2024/03/10/My-first-blog/"/>
    <id>https://byte-coder2020.github.io/2024/03/10/My-first-blog/</id>
    <published>2024-03-10T12:51:26.000Z</published>
    <updated>2024-03-10T12:51:26.746Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://byte-coder2020.github.io/2024/03/10/hello-world/"/>
    <id>https://byte-coder2020.github.io/2024/03/10/hello-world/</id>
    <published>2024-03-10T12:37:56.058Z</published>
    <updated>2024-03-10T12:37:56.058Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
